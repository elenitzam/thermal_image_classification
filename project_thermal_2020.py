# -*- coding: utf-8 -*-
"""Αντίγραφο του A Project_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s6RgU2mfn0ru8LBT0U8o5OK2_k7uLUF7
"""

!pip install tensorflow-gpu

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = ConfigProto()
config.gpu_options.per_process_gpu_memory_fraction = 0.5
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3

from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
#import matplotlib.pyplot as plt

IMAGE_SIZE = [224, 224]

train_path = '/content/drive/My Drive/thermal_data/project/train'
valid_path = '/content/drive/My Drive/thermal_data/project/test'

# Using imagenet weights

inception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

for layer in inception.layers:
    layer.trainable = False

# getting number of output classes
folders = glob('/content/drive/My Drive/thermal_data/project/train/*')

folders

x = Flatten()(inception.output)

prediction = Dense(len(folders), activation='softmax')(x)

# creating a model object
model = Model(inputs=inception.input, outputs=prediction)

# view the structure of the model
model.summary()

#  cost and optimization method used
model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

# Using Image Data Generator to import the images from the dataset
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/thermal_data/project/train',
                                                 target_size = (224, 224),
                                                 batch_size = 16,
                                                 class_mode = 'categorical'
                                                  ,shuffle=False)

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/thermal_data/project/test',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical'
                                            ,shuffle=False)

# fit the model

r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=10,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
 
)

import matplotlib.pyplot as plt

# plot the loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

# save it as a h5 file


from tensorflow.keras.models import load_model

model.save('model_inception.h5')

y_pred = model.predict(test_set)

y_pred

import numpy as np
y_pred = np.argmax(y_pred, axis=1)

y_pred

y_true=[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7]

y_true = np.array(y_true)

y_true

from sklearn.metrics import accuracy_score,f1_score,recall_score,precision_score

#calculate the scores

acc_test = accuracy_score(y_true, y_pred)

pre_test = precision_score(y_true, y_pred, average='macro')

rec_test = recall_score(y_true, y_pred, average='macro')

f1_test = f1_score(y_true, y_pred, average='macro')

acc_test

pre_test

rec_test

f1_test

